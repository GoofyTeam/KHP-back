type Ingredient {
    "Unique primary key."
    id: ID!

    "Ingredient name."
    name: String!

    "Unit of measurement for the ingredient."
    unit: UnitEnum!

    "Quantity for one unit of the ingredient."
    base_quantity: Float!

    quantities: [IngredientQuantity!]!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\IngredientResolver@quantityByLocation"
        )

    "The company that owns this ingredient."
    company: Company! @belongsTo

    category: Category! @belongsTo

    image_url: String
        @field(resolver: "App\\GraphQL\\Resolvers\\IngredientResolver@imageUrl")

    "Historique des mouvements de stock pour cet ingrédient"
    stockMovements(
        orderBy: [StockMovementOrderByClause!]
    ): [StockMovement!]!
        @field(resolver: "App\\GraphQL\\Resolvers\\IngredientResolver@stockMovements")

    withdrawals_today_count: Int!

    "Number of withdrawals for this ingredient today."
    withdrawals_this_week_count: Int!

    "Number of withdrawals for this ingredient this week."
    withdrawals_this_month_count: Int!

    "When the ingredient was created."
    created_at: DateTime!

    "When the ingredient was last updated."
    updated_at: DateTime!
}

enum IngredientOrderByField {
    ID @enum(value: "id")
    NAME @enum(value: "name")
    CREATED_AT @enum(value: "created_at")
    UPDATED_AT @enum(value: "updated_at")
    WITHDRAWALS_TODAY @enum(value: "withdrawals_today_count")
    WITHDRAWALS_THIS_WEEK @enum(value: "withdrawals_this_week_count")
    WITHDRAWALS_THIS_MONTH @enum(value: "withdrawals_this_month_count")
}

input IngredientOrderByClause {
    column: IngredientOrderByField!
    order: SortOrder! = ASC
}

type IngredientQuantity {
    "Le stock de l'ingrédient."
    quantity: Float!

    "La localisation de ce stock."
    location: Location!
}

extend type Query @guard {
    "List ingredients for the current company."
    ingredients(
        "Filter by a search term. Accepts SQL LIKE wildcards `%` and `_`."
        search: String @scope(name: "search")

        unit: UnitEnum @eq

        "Filtrer par un ou plusieurs identifiants d'emplacements."
        locationIds: [ID!] @scope(name: "locationId")

        "Filtrer par une ou plusieurs catégories."
        categoryIds: [ID!] @scope(name: "categoryId")

        "Options de tri des ingrédients"
        orderBy: [IngredientOrderByClause!] @orderBy

        "Get ingredient by its barcode."
        barcode: String @scope(name: "barcode")
    ): [Ingredient!]!
        @paginate(
            defaultCount: 10
            scopes: ["forCompany", "withWithdrawalCounts"]
        )

    "Find a single ingredient (only if it belongs to the current company)."
    ingredient(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:name,barcode", "required_without_all:name,barcode"])
        "Search by ingredient name."
        name: String @eq @rules(apply: ["prohibits:id,barcode", "required_without_all:id,barcode"])
        "Search by ingredient barcode."
        barcode: String @eq @rules(apply: ["prohibits:id,name", "required_without_all:id,name"])
    ): Ingredient @find(scopes: ["forCompany"])
}
