type Menu {
    id: ID!
    name: String!
    description: String
    image_url: String @field(resolver: "App\\GraphQL\\Resolvers\\MenuResolver@imageUrl")
    is_a_la_carte: Boolean!
    service_type: MenuServiceTypeEnum!
    is_returnable: Boolean!
    available(quantity: Int! = 1): Boolean! @field(resolver: "App\\GraphQL\\Resolvers\\MenuResolver@available")
    type: String!
    menu_type_id: ID!
    public_priority: Int!
    menu_type: MenuType! @belongsTo
    price: Float!
    categories: [MenuCategory!]! @belongsToMany
    allergens: [AllergenEnum!]!
    items: [MenuItem!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type MenuType {
    id: ID!
    name: String!
    public_index: Int!
}

type MenuItem {
    id: ID!
    location: Location! @belongsTo
    quantity: Float!
    unit: UnitEnum!
    entity: MenuItemEntity! @morphTo
}

union MenuItemEntity = Ingredient | Preparation

extend type Query @guard {
    menus(
        "Filtrer par un ou plusieurs allergènes."
        allergens: [AllergenEnum!] @scope(name: "allergen")
        "Filtrer par une ou plusieurs catégories (IDs)."
        category_ids: [ID!] @scope(name: "category")
        "Filtrer par un ou plusieurs types."
        types: [String!] @scope(name: "type")
        "Filtrer par type de service (PREP, DIRECT)."
        service_types: [MenuServiceTypeEnum!] @scope(name: "serviceType")
        "Filtrer par un range de prix [min, max]."
        price_between: [Float!] @scope(name: "priceBetween")
        "Filtrer par disponibilité."
        available: Boolean @scope(name: "available")
    ): [Menu!]! @paginate(defaultCount: 10, scopes: ["forCompany"])
    menu(id: ID! @eq): Menu @find(scopes: ["forCompany"])
    menuTypes: [MenuType!]! @all(scopes: ["forCompany", "ordered"])
}
