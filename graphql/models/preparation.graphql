type Preparation {
    "Unique primary key."
    id: ID!

    "Preparation name."
    name: String!

    "Unit of measurement for the preparation."
    unit: String!

    "The company that produces this preparation."
    company: Company! @belongsTo

    entities: [PreparationEntity!]! @hasMany

    locations: [Location!]! @belongsToMany

    "The categories associated with this preparation."
    categories: [Category!]! @belongsToMany

    quantities: [PreparationQuantity!]!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\PreparationResolver@quantityByLocation"
        )

    "Historique des mouvements de stock pour cette préparation"
    stockMovements: [StockMovement!]! @morphMany

    "When the preparation was created."
    created_at: DateTime!

    "When the preparation was last updated."
    updated_at: DateTime!
}

type PreparationQuantity {
    "Le stock de la préparation."
    quantity: Float!

    "La localisation de ce stock."
    location: Location!
}

extend type Query @guard {
    "Liste les preparations de ma company uniquement"
    preparations(
        "Recherche par nom, insensible aux accents et à la casse. Accepte les caractères génériques SQL LIKE `%` et `_`."
        search: String @scope(name: "search")

        "Filtre par unité de mesure avec opérateur LIKE."
        unit: String @where(operator: "like")

        "Filtre par catégorie"
        categoryId: ID @scope(name: "categoryId")

        "Filtre par identifiant d'emplacement"
        locationId: ID @scope(name: "locationId")
    ): [Preparation!]! @paginate(defaultCount: 10, scopes: ["forCompany"])

    "Trouve une preparation (et seulement si elle appartient à ma company)"
    preparation(
        id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])
        name: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
    ): Preparation @find(scopes: ["forCompany"])
}
