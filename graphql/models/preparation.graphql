type Preparation {
    "Unique primary key."
    id: ID!

    "Preparation name."
    name: String!

    "Unit of measurement for the preparation."
    unit: UnitEnum!

    "Quantity for one unit of the preparation."
    base_quantity: Float!

    "Unit for the base quantity of the preparation."
    base_unit: UnitEnum!

    "Allergens contained in this preparation."
    allergens: [AllergenEnum!]!

    "The company that produces this preparation."
    company: Company! @belongsTo

    "Threshold below which the preparation is considered understocked."
    threshold: Float

    entities: [PreparationEntity!]! @hasMany

    locations: [Location!]! @belongsToMany

    "The categories associated with this preparation."
    categories: [Category!]!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\PreparationResolver@categories"
        )

    quantities: [PreparationQuantity!]!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\PreparationResolver@quantityByLocation"
        )

    preparable_quantity: PreparationPreparableQuantity!
        @field(
            resolver: "App\\GraphQL\\Resolvers\\PreparationResolver@preparableQuantity"
        )

    image_url: String
        @field(
            resolver: "App\\GraphQL\\Resolvers\\PreparationResolver@imageUrl"
        )

    "Historique des mouvements de stock pour cette préparation"
    stockMovements: [StockMovement!]! @morphMany

    withdrawals_today_count: Int!

    "Number of withdrawals for this ingredient today."
    withdrawals_this_week_count: Int!

    "Number of withdrawals for this ingredient this week."
    withdrawals_this_month_count: Int!

    "When the preparation was created."
    created_at: DateTime!

    "When the preparation was last updated."
    updated_at: DateTime!
}

type PreparationQuantity {
    "Le stock de la préparation."
    quantity: Float!

    "La localisation de ce stock."
    location: Location!
}

type PreparationPreparableQuantity {
    "Quantité maximale préparable avec le stock actuel."
    quantity: Float!

    "Unité associée à la préparation."
    unit: UnitEnum!
}

enum PreparationOrderByField {
    ID @enum(value: "id")
    NAME @enum(value: "name")
    CREATED_AT @enum(value: "created_at")
    UPDATED_AT @enum(value: "updated_at")
    WITHDRAWALS_TODAY @enum(value: "withdrawals_today_count")
    WITHDRAWALS_THIS_WEEK @enum(value: "withdrawals_this_week_count")
    WITHDRAWALS_THIS_MONTH @enum(value: "withdrawals_this_month_count")
}

input PreparationOrderByClause {
    column: PreparationOrderByField!
    order: SortOrder! = ASC
}

extend type Query @guard {
    "Liste les preparations de ma company uniquement"
    preparations(
        "Recherche par nom, insensible aux accents et à la casse. Accepte les caractères génériques SQL LIKE `%` et `_`."
        search: String @scope(name: "search")

        "Filtre par unité de mesure avec opérateur LIKE."
        unit: UnitEnum @eq

        "Filtrer par un ou plusieurs identifiants d'emplacements."
        locationIds: [ID!] @scope(name: "locationId")

        "Filtrer par une ou plusieurs catégories."
        categoryIds: [ID!] @scope(name: "categoryId")

        "Filtrer par un ou plusieurs allergènes."
        allergens: [AllergenEnum!] @scope(name: "allergen")

        "Options de tri des préparations"
        orderBy: [PreparationOrderByClause!] @orderBy
    ): [Preparation!]!
        @paginate(
            defaultCount: 10
            scopes: ["forCompany", "withWithdrawalCounts"]
        )

    "Trouve une preparation (et seulement si elle appartient à ma company)"
    preparation(
        id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])
        name: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
    ): Preparation @find(scopes: ["forCompany"])

    "List preparations that dropped below their defined threshold."
    PreparationsThreshold(
        "Filtrer selon un ou plusieurs emplacements."
        locationIds: [ID!]
    ): [Preparation!]!
        @field(
            resolver: "App\\GraphQL\\Queries\\PreparationsThresholdQuery@resolve"
        )
}
